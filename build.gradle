//참고 : https://yeahajeong.tistory.com/219

//buildscript{} → 해당 프로젝트의 플러그인 의존성 관리를 위한 설정
buildscript {
//	build.gradle에서 사용하는 전역변수 설정
	ext {
//		springBootVersion = '2.0.6.RELEASE'
		springBootVersion = '2.4.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	//의존성 주입
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
//	스프링 부트 사용
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
//	JAVA언어 사용
	id 'java'
//	eclipse 사용
	id 'eclipse'
//	intelliJ 사용
	id 'idea'
//	myBatis 사용
	id 'war'
//	React사용
	id 'com.github.node-gradle.node' version '2.2.3'
}

//	참고 : https://blog.naver.com/PostView.nhn?blogId=qjawnswkd&logNo=222217933898&categoryNo=27&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search
/*
node{
	version = '14.16.0'
	download = true
	workDir = file("${project.projectDir}/src/main/frontend/nodejs")
	npmWorkDir = file("${project.projectDir}/src/main/frontend/npm")
	nodeModulesDir = file("${project.projectDir}/src/main/frontend")
}
task npmInstallDependencies(type:NpmTask){
	dependsOn 'npmSetup'
	execOverrides{
		it.ignoreExitValue = true
		it.workingDir = 'src/main/frontend'
	}
}

task npmBuild(type: NpmTask){
	dependsOn 'npmInstallDependencies'
	execOverrides{
		it.workingDir = 'src/main/frontend'
	}
	args = ['run', 'build']
}

task copyFrontendToBuild(type: Copy){
	dependsOn 'npmBuild'
	from "$projectDir/src/main/frontend/build/"
	into "$buildDir/resources/main/static"
}

processResources{
	dependsOn 'copyFrontendToBuild'
}
*/

// react 연동 위한 코드 참고 : https://dsc-sookmyung.tistory.com/m/21
def webappDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildReact"
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task installReact(type: Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}


group = 'com.jsb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	jcenter() // 직접 만든 라이브러리 업로드를 간단하게 해줌
}

dependencies {

//	Spring MVC를 사용하는 RESTful 애플리케이션을 포함한 웹 구축 용 스타터 구성을 포함하고 있고, Tomcat을 기본 임베디드 컨테이너로 사용
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile ("org.springframework.boot:spring-boot-starter-web:1.4.0.RELEASE") {
		exclude module:'spring-boot-starter-logging'
	}
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-configuration-processor:2.4.3'
//	 Spring Boot 어플리케이션을 테스트하기 위한 스타터 구성
	testCompile "org.springframework.boot:spring-boot-starter-test"

//	devTools
	compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.4.3'

//	 https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
//	 json 사용위한 plugin 추가
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

//	 https://mvnrepository.com/artifact/commons-lang/commons-lang
//	이거 추가하고나서 controller랑 view랑 연동된 것 같다?? 뭔지는 잘 모르겠음...뀨
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

//	콘솔 창에 log가 찍히게 하기 위해 추가함
	implementation group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'

//	mysql연동
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

//entityManangerFacroty bean을 생성할 수 있도록 도와줌
	// https://mvnrepository.com/artifact/org.javassist/javassist
	implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'

//	Thymeleaf 뷰를 사용하여 MVC 웹 응용 프로그램을 작성하기 위한 의존성 → html로 설정 테스트 하기 위함.
//	react 쓸거면 아래 코드 필요없음
	compile "org.springframework.boot:spring-boot-starter-thymeleaf"



//	lombok 사용
//	lombok은 기본 생성자, getter와 setter 생성까지 한번에 해결해주는 것
//	사용하기 위해선 marketPlace에서 lombok을 설치해주어야한다.
//	VO클래스 상단에 @Data라는 어노테이션을 적어줘야 정상적으로 실행됨.
//	참고: https://shlee0882.tistory.com/250?category=809647
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'


//	myBatis사용
//	참고: https://parksrazor.tistory.com/119
//	위에 참고랑 이것도 참고해볼까 싶음 : https://longbeom.tistory.com/104
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.4.3'

//  Spring boot CSRF 예방 용 Security coding
//	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation 'org.springframework.security:spring-security-test'
// 타임리프 관련 의존성을 추가해주지 않으면 시큐리티 태그 sec 를 사용할 수 없다.
//	compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5', version: '3.0.4.RELEASE'

//log4
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	compile("com.h2database:h2")
}


test {
	useJUnitPlatform()
}
